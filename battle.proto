package Sanguo.protocol.battle;

import "world.proto";


message Stage {
    required int32 id = 1;
    required bool star = 2;
}

message AlreadyStageNotify {
    required bytes session = 1;
    repeated Stage stages = 2;
}

message CurrentStageNotify {
    required bytes session = 1;
    required Stage stage = 2;
}

message NewStageNotify {
    required bytes session = 1;
    required Stage stage = 2;
}


message BattleHero {
    enum HeroType {
        HERO = 1;
        MONSTER = 2;
        }

    required int32 id = 1;
    required int32 original_id = 2;
    required int32 hp = 3;
    required HeroType ht = 4;       // 是玩家的英雄还是关卡的怪物
}



message Step {
	message Action {
		message Target {
			required int32 target_id = 1;
			required bool is_crit = 2;
		}
		optional int32 skill_id = 1;
		repeated Target targets = 2;
	}

    message HeroNotify {
		message Buff{
			required int32 id = 1;
			optional int32 value = 2;
		}
        required int32 target_id = 1;
        required int32 hp = 2;
        repeated Buff adds = 3;
        repeated int32 removes = 4;
        optional int32 value = 5;           // 引起hp变化的value
    }
	required int32 id = 1;                  // 发起行动的英雄ID
    optional Action action = 2;
    repeated HeroNotify hero_notify = 3;

}

message Ground {
    // 一军
    repeated BattleHero self_heros = 1;     //
    repeated BattleHero rival_heros = 2;    //
    required bool self_win = 3;             //

    repeated Step steps = 4;            // 每次行动
}

message Battle {
    required int32 self_power = 1;          // 已方总战力
    required int32 rival_power = 2;         // 对方总战力
    required string self_name = 3;
    required string rival_name = 4;
    required Ground first_ground = 5;       // 前军
    required Ground second_ground = 6;      // 中军
    required Ground third_ground = 7;       // 后军
    required bool self_win = 8;             // 自己是否胜利
}


message PVERequest {
    required bytes session = 1;
    required int32 stage_id = 2;
}

message PVEResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional int32 stage_id = 3;
    optional Battle battle = 4;
    optional Sanguo.protocol.world.Attachment drop = 5;
}


message HangNotify {
    message HangInfo {
        required int32 stage_id = 1;
        required int32 start_time = 2;      // UTC 秒
        required bool finished = 3;         
        required int32 rewared_gold = 4;        // 目前获得金币
    }

    message PlunderLog {
        required string attacker = 1;       // 名字
        required bool win = 2;              // 自己是否防御成功
        required int32 gold = 3;            // 损失/获得的金币
    }

    required bytes session = 1;
    required int32 remained_time = 2;       // 当天剩余时间 秒
    
    optional HangInfo hang = 3;
    repeated PlunderLog logs = 4;   // 掠夺日志
}


message HangRequest {
    required bytes session = 1;
    required int32 stage_id = 2;
}

message HangResponse {
    required int32 ret = 1;
    required bytes session = 2;
}

message HangCancelRequest {
    required bytes session = 1;
}

message HangCancelResponse {
    required int32 ret = 1;
    required bytes session = 2;
}



// 掠夺
message PlunderNotify {
    required bytes session = 1;
    required int32 amount = 2;  // 今日掠夺次数
    required int32 max_amount = 3;  // 每日最大次数
    required int32 cost_sycee = 4;  // 超过最大次数后每次掠夺要花费的元宝
}

message Plunder {
    required int32 id = 1;
    required string name = 2;
    required int32 gold = 3;   // 掠夺收益
    required int32 power = 4;  // 战力
}


message PlunderListRequest {
    required bytes session = 1;
}

message PlunderListResponse {
    required int32 ret = 1;
    required bytes session = 2;
    repeated Plunder plunders = 3;
}


message PlunderRequest {
    required bytes session = 1;
    required int32 id = 2;
}

message PlunderResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional Battle battle = 3;
    optional Sanguo.protocol.world.Attachment drop = 4;
}


// 战俘
message Prisoner {
    required int32 id = 1;      // 战俘ID
    required int32 oid = 2;     // 原始ID

    required int32 prob = 3;    // 当前劝降几率
    
    required int32 attack = 4;
    required int32 defense = 5;
    required int32 hp = 6;
    required int32 crit = 7;
}


message PrisonerListNotify {
    required bytes session = 1;
    repeated Prisoner prisoner = 2;
}

message UpdatePrisonerNotify {
    required bytes session = 1;
    repeated Prisoner prisoner = 2;
}

message NewPrisonerNotify {
    required bytes session = 1;
    repeated Prisoner prisoner = 2;
}

message RemovePrisonerNotify {
    required bytes session = 1;
    repeated int32 ids = 2;
}


message PrisonerAddProbRequest {
    required bytes session = 1;
    required int32 id = 2;      // 战俘ID
}

message PrisonerAddProbResponse {
    required int32 ret = 1;
    required bytes session = 2;
}

message PrisonerGetRequest {
    required bytes session = 1;
    required int32 id = 2;      // 战俘ID
}

message PrisonerGetResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional bool success = 3;  // 是否成功
}



// 监狱
message PrisonNotify {
    required bytes session = 1;
    required int32 max_prisoners_amount = 2;    // 最多能有的战俘数量
    required int32 incr_amount_cost = 3;        // 增加战俘上限所需元宝
}

message PrisonIncrAmountRequest {
    required bytes session = 1;
}

message PrisonIncrAmountResponse {
    required int32 ret = 1;
    required bytes session = 2;
}



message ArenaNotify {
    message NBCharacter {
        required int32 rank = 1;
        required string name = 2;
    }
    
    required bytes session = 1;
    required int32 week_rank = 2;
    required int32 day_rank = 3;
    required int32 week_score = 4;
    required int32 day_score = 5;
    required int32 remained_amount = 6;  // 每日剩余次数
    
    repeated NBCharacter chars = 7;
}

message ArenaPanelRequest {
    required bytes session = 1;
}

message ArenaPanelResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional ArenaNotify panel = 3;
}



message ArenaRequest {
    required bytes session = 1;
}

message ArenaResponse {
    required int32 ret = 1;
    required bytes session = 2;
    optional Battle battle = 3;
}
