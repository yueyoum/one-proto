package Sanguo.protocol.world;

// 服务器列表
message Server {
    enum ServerStatus {
        GOOD = 1;
        BUSY = 2;
        FULL = 3;
        MAINTAIN = 4;
    }

    required int32 id = 1;
    required string name = 2;
    required ServerStatus status = 3;
    required bool have_char = 4;  // 请求服务器列表的用户是否在此服中有角色
}


// 同步请求
message SyncRequest {
    required bytes session = 1;
}

message SyncResponse {
    required int32 ret = 1;
    required bytes session = 2;
    required int64 utc_timestamp = 3;
}


message ResumeRequest {
    required bytes session = 1;
    required int32 server_id = 2;
}

message ResumeResponse {
    required int32 ret = 1;
    required bytes session = 2;
}




message CommandResponse {
    required int32 ret = 1;
    required bytes session = 2;
}

message VersionCheckRequest {
    required bytes session = 1;
    required int32 version = 2;
}

message VersionCheckResponse {
    required int32 ret = 1;
    required bytes session = 2;
}


message Attachment {
    // 装备
    message Equipment {
        required int32 id = 1;
        required int32 level = 2;       // 强化等级
        required int32 step = 3;        // 升阶阶数
        required int32 amount = 4;
    }

    // 宝石
    message Gem {
        required int32 id = 1;
        required int32 amount = 2;
    }

    // 材料
    message Stuff {
        required int32 id = 1;
        required int32 amount = 2;
    }

    optional int32 gold = 1;            // 金币
    optional int32 sycee = 2;           // 元宝
    optional int32 exp = 3;             // 等级经验
    optional int32 official_exp = 4;    // 官职经验
    repeated int32 heros = 5;           // 武将

    repeated Equipment equipments = 6;
    repeated Gem gems = 7;
    repeated Stuff stuffs = 8;
}


message SellRequest {

    message SellElement {
        enum SellType {
            SELL_HERO = 1;
            SELL_SOUL = 2;
            SELL_EQUIPMENT = 3;
            SELL_GEM = 4;
            SELL_STUFF = 5;
        }

        required SellType tp = 1;
        required int32 id = 2;
        required int32 amount = 3;
    }

    required bytes session = 1;
    repeated SellElement elements = 2;
}


message SellResponse {
    required int32 ret = 1;
    required bytes session = 2;
}




enum FunctionType {
    FUNC_EQUIPMENT_STRENGTH = 1;     // 装备强化
    FUNC_EQUIPMENT_STEP = 2;         // 装备进阶
    FUNC_HERO_STEP = 3;              // 武将进阶
    FUNC_GEM_EMBED = 4;              // 宝石镶嵌
    FUNC_TASK = 5;                   // 日常任务
    FUNC_ACHIEVEMENT = 6;            // 成就
    FUNC_HANG = 7;                   // 挂机
    FUNC_ARENA = 8;                  // 比武
    FUNC_PLUNDER = 9;                // 掠夺
    FUNC_OFFICIAL = 10;              // 官职
    FUNC_STAGE_ELITE = 11;           // 精英副本
    FUNC_FRIEND = 12;                // 好友
    FUNC_TEAM_BATTLE = 13;           // 猛将挑战
    FUNC_SOCKET = 20;                // 阵法插槽
}


message FreezeFunctionNotify {
    // 还未开启的功能
    required bytes session = 1;
    repeated FunctionType funcs = 2;
}

message OpenFunctionNotify {
    required bytes session = 1;
    required FunctionType func = 2;
}
    

